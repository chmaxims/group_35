GitHub. HW_2
1. На локальном репозитории сделать ветки для:
- Postman === git branch Postman
- Jmeter === git branch Jmeter
- CheckLists === git branch Checklists
- Bag Reports === git branch Bag_Reports
- SQL === git branch SQL
- Charles === git branch Charles
- Mobile testing === git branch Mobile_testing

2. Запушить все ветки на внешний репозиторий === git push -u origin --all
3. В ветке Bag Reports сделать текстовый документ со структурой баг репорта === git checkout Bag_Reports
																				vim bag_report.txt
																				i
																				1. Краткое описание (Title, Summary) - Раздел, который кратко передает суть бага одним предложением. Отвечает на вопросы "Что?", "Где?", "При каких обстоятельствах?".
																				2. Проект - Название проекта, программы или приложения, в котором выявлен баг.
																				3. Версия - Точная версия ПО, содержащая баг.
																				4. Серьезность бага - Параметр, который определяет влияние бага на работу программы по шкале от S0 до S4.
																				5. Приоритет - Параметр, который определяет срочность исправления бага по шкале от P1 до P3.
																				6. Статус - Определяется в зависимости от того, на какой стадии находится баг: открыт, в работе, исправлен, отклонен, отсрочен и т.д.
																				7. Автор - Создатель баг-репорта.
																				8. Исполнитель - Разработчик, который будет устранять баг.
																				9. Шаги к воспроизведению - Точная последовательность действий, которая приводит к тому, как сейчас работает программа.
																				10. Ожидаемый результат - Как должна работать программа на самом деле и к чему должны приводить действия, описанные в пункте "Шаги к воспроизведению".
																				11. Дополнения - Ссылки, скриншоты, видео и другие материалы, которые помогут исполнителю лучше понять суть проблемы.
																				ESC :wq
4. Запушить структуру багрепорта на внешний репозиторий === git add .
															git commit -m "added bag_report.txt"
															git push
5. Вмержить ветку Bag Reports в Main === git checkout Main
										 git merge Bag_Reports
6. Запушить main на внешний репозиторий. === git push
7. В ветке CheckLists набросать структуру чек листа. === git checkout Checklists
														 vim checklist
														 i
														 Чек-лист для программы Блокнот
														 Карта приложения.
														 Блокнот:	1) Заголовок   
																		а) кнопка "Свернуть приложение"
																		б) кнопка "Развенуть приложение"
																		в) кнопка "Закрыть приложение"
																	2) Строка меню	
																		а) пункт меню "Файл"
																		б) пункт меню "Правка"
																		в) пункт меню "Формат"
																		г) пункт меню "Вид"
																		д) пункт меню "Справка"
																	3) Содержимое окна
																		а) поле ввода текста
																		б) полоса прокрутки.
														 Раздел «Заголовок»:
														 Проверка работы кнопки «Свернуть приложение».
														 Проверка работы кнопки «Развернуть приложение».
														 Проверка работы кнопки «Закрыть приложение».

														 Раздел «Содержимое окна»:
														 Проверка ввода текста в поле ввода текста (числа, буквы, спецсимволы).
														 Проверка работы вертикального скролла (полосы прокрутки).

														 Проверка работы кнопки «Свернуть приложение».
														 Проверка работы функционала разворачивания приложения из панели задач.
														 Проверка работы кнопки «Развернуть приложение».
														 Проверка работы кнопки «Закрыть приложение».
														ESC :wq
8. Запушить структуру на внешний репозиторий === git add .
												 git commit -m "added checklist.txt"
												 git push
9. На внешнем репозитории сделать Pull Request ветки CheckLists в main === click Compare and Pull Request
10. Синхронизировать Внешнюю и Локальную ветки Main === git fetch (чтобы посмотреть, есть ли изменения на внешнем репозитории)
														git pull
